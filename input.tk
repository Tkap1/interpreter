
struct s_color
{
	u8 r;
	u8 g;
	u8 b;
	u8 a;
}

struct s_v2
{
	float x;
	float y;
}

external_func int printf(char*, int) "msvcrt.dll";
external_func float sqrtf(float) "msvcrt.dll";
external_func void InitWindow(int, int, char*) "raylib.dll";
external_func void BeginDrawing() "raylib.dll";
external_func void EndDrawing() "raylib.dll";
external_func void ClearBackground(s_color) "raylib.dll";
external_func bool WindowShouldClose() "raylib.dll";
external_func void DrawRectangle(int, int, int, int, s_color) "raylib.dll";
external_func void CloseWindow() "raylib.dll";
external_func bool IsKeyDown(int) "raylib.dll";
external_func bool IsKeyPressed(int) "raylib.dll";
external_func void SetTargetFPS(int) "raylib.dll";
external_func s_v2 GetMousePosition() "raylib.dll";
external_func s_v2 IsMouseButtonPressed(int) "raylib.dll";

func float v2_length(s_v2 v)
{
	return sqrtf(v.x * v.x + v.y * v.y);
}

func s_v2 v2_normalized(s_v2 v)
{
	s_v2 result = v;
	float length = v2_length(v);
	if length > 0
	{
		result.x = result.x / length;
		result.y = result.y / length;
	}
	return result;
}

func int main()
{
	SetTargetFPS(120);
	int ww = 600;
	int wh = 600;
	InitWindow(ww, wh, "dog");

	int proj_active;
	s_v2 proj;
	s_v2 proj_size;
	proj_size.x = 32.0;
	proj_size.y = 32.0;
	s_v2 proj_dir;

	s_color c;
	c.r = 51;
	c.g = 51;
	c.b = 51;
	c.a = 255;

	s_color red;
	red.r = 255;
	red.a = 255;

	s_color green;
	green.g = 255;
	green.a = 255;

	s_v2 pos;
	s_v2 vel;
	float speed = 7.0;
	float proj_speed = 5.0;

	s_v2 player_size;
	player_size.x = 16.0;
	player_size.y = 40.0;

	for 100000
	{
		if WindowShouldClose() == 1
		{
			break;
		}
		BeginDrawing();
		ClearBackground(c);

		s_v2 mouse = GetMousePosition();

		float dir;
		if IsKeyDown(65)
		{
			dir -= 1.0;
		}
		if IsKeyDown(68)
		{
			dir += 1.0;
		}

		vel.x += dir * speed;
		vel.y += 0.05;

		if IsKeyPressed(32)
		{
			vel.y = -5.0;
		}

		if IsMouseButtonPressed(0)
		{
			s_v2 foo;
			foo.x = mouse.x;
			foo.y = mouse.y;
			foo.x -= pos.x;
			foo.y -= pos.y;
			proj_dir = v2_normalized(foo);
			proj_active = 1;
			proj = pos;
		}

		pos.x += vel.x;
		pos.y += vel.y;

		proj.x += proj_dir.x * proj_speed;
		proj.y += proj_dir.y * proj_speed;

		if pos.y > cast float wh - player_size.y
		{
			pos.y = cast float wh - player_size.y;
		}

		vel.x = 0.0;

		DrawRectangle(cast int pos.x, cast int pos.y, cast int player_size.x, cast int player_size.y, red);
		if proj_active
		{
			DrawRectangle(cast int proj.x, cast int proj.y, cast int proj_size.x, cast int proj_size.y, green);
		}

		EndDrawing();
	}

	CloseWindow();


}
